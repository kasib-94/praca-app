@page "/register";
@inject NavigationManager NavigationManager
<div class="col-12">


    <div class="col-4 mx-auto">
        <Syncfusion.Blazor.DataForm.SfDataForm 
                Model="@Model"  
                OnSubmit="RegisterHandle"
        >
            <div class="mb-3 text-center">
                <img src="/img/login.jpg" style="max-height:5rem" />
                <h3>Register</h3>
            </div>
            <FormValidator>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidator>
            <FormItems>
                <FormItem Field="@nameof(Model.Username)" LabelText="Nazwa użytkownika"></FormItem>
                <FormItem Field="@nameof(Model.Email)" LabelText="Email"></FormItem>
                <FormItem EditorType="@FormEditorType.Password" LabelText="Hasło" Field="@nameof(Model.Password)"></FormItem>
                <FormItem EditorType="@FormEditorType.Password" LabelText="Powtórz hasło" Field="@nameof(Model.PasswordRepeat)"></FormItem>
            </FormItems>
        </Syncfusion.Blazor.DataForm.SfDataForm>
    </div>
</div>

@code {

    public DB.Models.RegisterModel Model { get; set; } = new();

    public async Task RegisterHandle(EditContext model)
    {

        try
        {
            var item = model.Model as DB.Models.RegisterModel;
            await Mediator.Send(new DB.Modules.Authentication.Register.Register.Request()
                {
                    Email = item.Email,
                    Password = item.Password,
                    PasswordRepeat = item.PasswordRepeat,
                    UserName = item.Username
                });
            await Mediator.Send(new DB.Modules.Authentication.Login.Login.Request()
                {
                    Password = item.Password,
                    Username = item.Username
                });


            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Duration = 3000,
                    Summary = "Zalogowano",
                    CloseOnClick = true
                });
            var timer = new Timer(new TimerCallback(_ =>
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }), null, 2000, 2000);
        }
        catch (Exception ex)
        {

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = ex.Message,
                    CloseOnClick = true
                });
        }
    }

}
