@page "/myprofile";
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Syncfusion.Blazor.Grids;
@using DB.Modules.Auction.Queries;
@using DB.Modules.Auction.Command;
@using Syncfusion.Blazor.Popups;
@inject NavigationManager uriHelper;


@if (UserModel != null)
{
    <blazor_ecommerce_app.Components.UserOverview UserId="@UserModel.Id" />
}

 
@code {
    [CascadingParameter]
    public AuthModel Auth {get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchData();
        }

    }
    public string auctionPath = "/auctionview/";
    public List<DB.Modules.Auction.Queries.GetMyAuctions.Response> ActiveAuctions { get; set; }
    public List<DB.Modules.Auction.Queries.GetMyFinishedAuctions.Response> FinishedAuctions { get; set; }
    public DB.Modules.Authentication.GiveUserInfo.Response UserModel { get; set; }
    public async Task FetchData()
    {


        if (Auth == null)
        {
            Auth = await localStorage.GetItemAsync<AuthModel>("auth_token");
        }
        ActiveAuctions = await Mediator.Send(new DB.Modules.Auction.Queries.GetMyAuctions.Request()
        {
            UserId = Auth.Id
        });
        FinishedAuctions = await Mediator.Send(new DB.Modules.Auction.Queries.GetMyFinishedAuctions.Request()
            {
                UserId = Auth.Id
            });

        UserModel = await Mediator.Send(new DB.Modules.Authentication.GiveUserInfo.Request()
            {
                UserId = Auth.Id
            });
        StateHasChanged();
    }

    public async Task FinishAuction(int auctionId)
    {
      await  Mediator.Send(new FinishMyAuction.Request()
            {
                UserId = Auth.Id,
                AuctionId = auctionId
            });
          await  FetchData();
    }
}
