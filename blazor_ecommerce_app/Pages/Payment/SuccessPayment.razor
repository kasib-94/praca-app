@page "/successpayment/{AuctionId:int}"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using DB.Modules.Auction.Queries;

<div class="payment-status-container">
    @if (StripeStatus == DB.Domain.Entities.StripeStatus.Success)
    {
        <div class="success-message">
            <h1>Congratulations on Your Purchase!</h1>
            <p>Thank you for your payment. We hope you enjoy your new item.</p>
            <p>We recommend our services for future purchases.</p>
            <h2>@Model.Title</h2>
            <h3>@Model.Description</h3>
        </div>
    }
    else
    {
        <div class="failure-message">
            <h1>Payment Failed</h1>
            <p>Unfortunately, your payment was not successful.</p>
            <p>Please try again or contact our support for assistance.</p>
            <h2>@Model.Title</h2>
            <h3>@Model.Description</h3>
        </div>
    }
</div>

<style>
    .payment-status-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        text-align: center;
        background-color: #f5f5f5;
        padding: 20px;
        box-sizing: border-box;
    }

    .success-message, .failure-message {
        max-width: 600px;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        background-color: #fff;
    }

    .success-message h1, .failure-message h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
    }

    .success-message p, .failure-message p {
        font-size: 1.2rem;
        margin-bottom: 20px;
    }

    .success-message h2, .failure-message h2 {
        font-size: 1.5rem;
        color: #333;
    }

    .success-message {
        border-left: 10px solid #4CAF50;
    }

    .failure-message {
        border-left: 10px solid #F44336;
    }
</style>

@code {
    [Parameter]
    public int AuctionId { get; set; }
    [CascadingParameter]
    public AuthModel Auth { get; set; }

    public GetAuctionById.Response Model { get; set; }

    public DB.Domain.Entities.StripeStatus StripeStatus { get; set; } = DB.Domain.Entities.StripeStatus.Failed;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchData();
        }

    }

    public async Task FetchData()
    {

        if (Auth == null)
        {
            Auth = await localStorage.GetItemAsync<AuthModel>("auth_token");
        }

        StripeStatus= await Mediator.Send(new DB.Modules.Payment.Commands.CheckStripeStatus.Request()
            {
                AuctionId = AuctionId
            });

        Model = await Mediator.Send(new DB.Modules.Auction.Queries.GetAuctionById.Request()
            {
                AuctionId = AuctionId,
                UserId = Auth.Id

            });
        StateHasChanged();
    }
}
