@page "/postaldata/{AuctionId:int}"
@using Syncfusion.Blazor.DataForm
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@if (Model.Confirmed)
{
    <div class="col-12">
        <span >Address data is confirmed</span>
        <SfButton OnClick="CreateStripeSession">Pay now!</SfButton>
    </div>

}else{
    <div class="col-12">
        <span >Confirm address details!</span>
    </div>
  
}
@if (Model.BrakDostepu == false)
{

    <SfDataForm ID="MyForm"
    Model="@Model"
    
    OnSubmit="ConfirmPostalHandler"
    ValidationDisplayMode="FormValidationDisplay.Tooltip">

        <FormValidator>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidator>

    
            @if (Model.Confirmed == false)
        {
            <FormItems>
                <FormItem   IsEnabled="true" Field="@nameof(Model.Adress)" Placeholder="Adress" LabelText="Adress"></FormItem>
                <FormItem IsEnabled="true" Field="@nameof(Model.PostCode)" Placeholder="Post code" LabelText="Post code"></FormItem>
                <FormItem IsEnabled="true" Field="@nameof(Model.PhoneNumber)" Placeholder="Phone number" LabelText="Phone number"></FormItem>
            </FormItems>
            }
            else
            {
            <FormItems>
                <FormItem IsEnabled="false" Field="@nameof(Model.Adress)" Placeholder="Adress" LabelText="Adress"></FormItem>
                <FormItem IsEnabled="false" Field="@nameof(Model.PostCode)" Placeholder="Post code" LabelText="Post code"></FormItem>
                <FormItem IsEnabled="false" Field="@nameof(Model.PhoneNumber)" Placeholder="Phone number" LabelText="Phone number"></FormItem>
                   </FormItems>
            }

       

     
        <FormButtons>
            @if (Model.Confirmed == false)
            {
                    <SfButton>Confirm address details</SfButton>
                }
                else
                {
                    <SfButton>Change address details</SfButton>
                }

        </FormButtons>

    </SfDataForm>
}
else
{
    <span>Brak dostepu!!</span>
}



@code {

    [CascadingParameter]
    public AuthModel Auth
    {
        get; set;
    }

    [Parameter]
    public int AuctionId { get; set; }

    public DB.Modules.Payment.Queries.GetPostalData.Response Model { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchData();
        }

    }

    public async Task ConfirmPostalHandler(EditContext model)
    {
        try
        {
            if (Model.Confirmed == false)
            {
                await Mediator.Send(new DB.Modules.Payment.Commands.ConfirmAddressDetails.Request()
                    {
                        Model = Model
                    });
            }
            else
            {
                await Mediator.Send(new DB.Modules.Payment.Commands.UnlockAdressDetails.Request()
                    {
                        PostDataId = Model.Id
                    });
            }

            await  FetchData();

        }
        catch (Exception ex)
        {
            Notifiaction.ShowToast(new Service.Notification.ToastOption()
                {
                    Exception = ex,
                    Type = Service.Notification.ToastType.error
                });
        }
    }
    public void CreateStripeSession()
    {
        
    }

    public async Task FetchData()
    {

        if (Auth == null)
        {
            Auth = await localStorage.GetItemAsync<AuthModel>("auth_token");
        }
        Model = await Mediator.Send(new DB.Modules.Payment.Queries.GetPostalData.Request()
            {
                AuctionId = AuctionId,
                UserId = Auth.Id

            });
        StateHasChanged();
    }

}
