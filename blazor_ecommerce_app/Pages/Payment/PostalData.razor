@page "/postaldata/{AuctionId:int}"
@using Syncfusion.Blazor.DataForm
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@if (Model.Confirmed)
{
    <div class="col-12">
        <RadzenAlert Variant="@Variant.Filled" AlertStyle="@AlertStyle.Success" Size="@AlertSize.Large" Shade="Shade.Default" AllowClose=false>
            Dane adresowe są zatwierdzone <br />
        </RadzenAlert>
    </div>

}else{
    <RadzenAlert Variant="@Variant.Filled" AlertStyle="@AlertStyle.Info" Size="@AlertSize.Large" Shade="Shade.Default" AllowClose=false>
        Zatwierdź dane adresowe <br />
    </RadzenAlert>
  
}
@if (Model.BrakDostepu == false)
{

    <SfDataForm ID="MyForm"
    Model="@Model"
    
    OnSubmit="ConfirmPostalHandler"
    ValidationDisplayMode="FormValidationDisplay.Tooltip">

        <FormValidator>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidator>

    
            @if (Model.Confirmed == false)
        {
            <FormItems>
                <FormItem IsEnabled="false" Field="@nameof(Model.Kwota)" Placeholder="Kwota do zapłaty" LabelText="Kwota do zapłaty"></FormItem>
                <FormItem IsEnabled="true" Field="@nameof(Model.Adress)"  Placeholder="Adres" LabelText="Adres"></FormItem>
                <FormItem IsEnabled="true" Field="@nameof(Model.PostCode)" Placeholder="Kod pocztowy" LabelText="Kod pocztowy"></FormItem>
                <FormItem IsEnabled="true" Field="@nameof(Model.PhoneNumber)" Placeholder="Numer telefonu" LabelText="Numer telefonu"></FormItem>
   
            </FormItems>
            }
            else
            {
            <FormItems>
                <FormItem IsEnabled="false" Field="@nameof(Model.Kwota)" Placeholder="Kwota do zapłaty" LabelText="Kwota do zapłaty"></FormItem>
                <FormItem IsEnabled="false" Field="@nameof(Model.Adress)" Placeholder="Adres" LabelText="Adres"></FormItem>
                <FormItem IsEnabled="false" Field="@nameof(Model.PostCode)" Placeholder="Kod pocztowy" LabelText="Kod pocztowy"></FormItem>
                <FormItem IsEnabled="false" Field="@nameof(Model.PhoneNumber)" Placeholder="Numer telefonu" LabelText="Numer telefonu"></FormItem>
              
             </FormItems>
            }

       

     
        <FormButtons>
            @if (Model.Confirmed == false)
            {
                    <SfButton>Zatwierdź</SfButton>
                }
                else
                {
                    <SfButton OnClick="CreateStripeSession">Zapłać</SfButton> <SfButton>Zmień dane adresowe</SfButton>
                }

        </FormButtons>

    </SfDataForm>
}




@code {

    [CascadingParameter]
    public AuthModel Auth
    {
        get; set;
    }

    [Parameter]
    public int AuctionId { get; set; }

    public DB.Modules.Payment.Queries.GetPostalData.Response Model { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchData();
        }

    }

    public async Task ConfirmPostalHandler(EditContext model)
    {
        try
        {
            if (Model.Confirmed == false)
            {
                await Mediator.Send(new DB.Modules.Payment.Commands.ConfirmAddressDetails.Request()
                    {
                        Model = Model
                    });
            }
            else
            {
                await Mediator.Send(new DB.Modules.Payment.Commands.UnlockAdressDetails.Request()
                    {
                        PostDataId = Model.Id
                    });
            }

            await  FetchData();

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = ex.Message,
                    CloseOnClick = true
                });
        }
    }
    public async void CreateStripeSession()
    {
        try
        {
            var result = await Mediator.Send(new DB.Modules.Payment.Queries.MakePayment.Request()
                {
                    AuctionId = Model.AuctionId
                });
            navManager.NavigateTo(result.StripeSessionUrl);  
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = ex.Message,
                    CloseOnClick = true
                });
        }
       
   
    }

    public async Task FetchData()
    {

        if (Auth == null)
        {
            Auth = await localStorage.GetItemAsync<AuthModel>("auth_token");
        }
        Model = await Mediator.Send(new DB.Modules.Payment.Queries.GetPostalData.Request()
            {
                AuctionId = AuctionId,
                UserId = Auth.Id

            });
        StateHasChanged();
    }

}
