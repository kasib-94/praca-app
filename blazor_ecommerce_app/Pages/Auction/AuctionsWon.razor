@page "/auctionswon";
@using DB.Modules.Auction.Queries;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Grids;
@inject NavigationManager uriHelper;
@inject Blazored.LocalStorage.ILocalStorageService localStorage



@if (Model.Any())
{
    @if (_model.Any())
    {
        <blazor_ecommerce_app.Components.ItemComponent Title="Oczekujące na zapłate"
                                                       UserId=@User.Id
                                                       OdswiezDane="FetchData"
                                                       TypKomponentuItem="@DB.Models.TypKomponentuItem.DoZaplaty"
                                                       Data="@_model">
        </blazor_ecommerce_app.Components.ItemComponent>
    }
  
    @if (oplacone.Any())
    {
        <blazor_ecommerce_app.Components.ItemComponent Title="Opłacone"
                                                       UserId=@User.Id
                                                       OdswiezDane="FetchData"
                                                       TypKomponentuItem="@DB.Models.TypKomponentuItem.Oplacone"
                                                       Data="@oplacone">
        </blazor_ecommerce_app.Components.ItemComponent>
    }
   
}





@code {
    public DB.Models.AuthModel User { get; set; }
    public List<GetListOfAuctions.Response> Model { get; set; } = new();
    public IEnumerable<DB.Models.IItem> _model => Model.Where(x=>x.Status == DB.Domain.Entities.AuctionStatusType.Finished).Cast<DB.Models.IItem>();
    public IEnumerable<DB.Models.IItem> oplacone => Model.Where(x => x.Status == DB.Domain.Entities.AuctionStatusType.PaymentConfirmed).Cast<DB.Models.IItem>();
    public string auctionPath = "/postaldata/";

    protected override async Task OnInitializedAsync()
    {
        User = await CustomAuthProvider.GetUser();
        if (User != null)
        {
            await FetchData();
        }
    }
    public async Task FetchData()
    {    
            Model = await Mediator.Send(new DB.Modules.Auction.Queries.GetAuctionsIWon.Request()
            {
                UserId = User.Id
            });
        StateHasChanged();
    }

}
