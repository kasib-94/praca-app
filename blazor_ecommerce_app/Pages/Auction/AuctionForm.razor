@page "/newauction";
@using Syncfusion.Blazor.RichTextEditor;
<div class="col-12">
    <div class="col-6 mx-auto">
        <Syncfusion.Blazor.DataForm.SfDataForm ID="MyForm" 
                                               Model="@Model"
                                               OnSubmit="HandleSubmit">
            <FormValidator>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidator>
            <FormItems>
                <FormItem Field="@nameof(Model.Title)"></FormItem>
              <FormItem Field="@nameof(Model.Description)">
                 <Template>
                     <Syncfusion.Blazor.RichTextEditor.SfRichTextEditor Value="@Model.Description">
                          <RichTextEditorToolbarSettings Items="@Tools" />
                          <RichTextEditorQuickToolbarSettings  Link="@Link" />
                      </Syncfusion.Blazor.RichTextEditor.SfRichTextEditor>
                    </Template>
                </FormItem>


                <FormItem Field="@nameof(Model.Photos)">
                    <Template>
                        <SfUploader AutoUpload="true">
                            <UploaderEvents ValueChange="@OnChange"></UploaderEvents>
                        </SfUploader>
                    </Template>
                </FormItem>
              
            </FormItems>
        </Syncfusion.Blazor.DataForm.SfDataForm>
    </div>
</div>

@code {
    public DB.Models.NewAuction Model { get; set; } = new();
    public List<string> AllowedExtensions = new() { ".jpg", ".png"};

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
         new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },

    };

    private List<LinkToolbarItemModel> Link = new List<LinkToolbarItemModel>()
    {
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Open },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Edit },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.UnLink }
    };

    private async Task OnChange(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                var path = @"" + file.FileInfo.Name;
                FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
                await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                filestream.Close();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleSubmit()
    {
        
    }
}
