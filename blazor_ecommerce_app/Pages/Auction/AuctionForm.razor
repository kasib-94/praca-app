@page "/newauction";
@using Syncfusion.Blazor.RichTextEditor;
@inject NavigationManager uriHelper;
<div class="col-12">
    <div class="col-10 mx-auto">
     

<RadzenTemplateForm Data="@Model" TItem="@DB.Models.NewAuction" Submit="async(item) =>{await HandleSubmit(item);}">
    <RadzenStack Gap="1rem" class="rz-p-0 rz-p-lg-4">

        <!-- Auction Type Section -->
                <RadzenFieldset Text="Typ aukcji">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenDropDown Data="@Lista"
                                            TextProperty="Nazwa"
                                            ValueProperty="Id"
                                            Value="Model.AuctionType"
                                            ValueChanged="(DB.Domain.Entities.AuctionType type)=>{
                                            Model.AuctionType = type; StateHasChanged();}"
                                            Style="width: 100%; max-width: 400px;"
                                            Name="AuctionType"
                                            >
                            </RadzenDropDown>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenFieldset>


        <!-- Title Section -->
        <RadzenFieldset Text="Tytuł">
            <RadzenRow AlignItems="AlignItems.Center">
      
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenTextBox 
                        @bind-Value="Model.Title" 
                        Placeholder="Tytuł" 
                        Style="width: 100%;" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <!-- Pricing Section -->
 
                    @if (DB.SD.AuctionSD.IsAuction(Model.AuctionType))
                {
            <RadzenFieldset Text="Cena wywoławcza">
                <RadzenStack Gap="1rem">
                    
                        <RadzenRow AlignItems="AlignItems.Center">
                      
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenNumeric @bind-Value="Model.PriceAuction"
                                               Placeholder="Cena wywoławcza"
                                               Style="width: 100%;" />
                            </RadzenColumn>
                        </RadzenRow>
                                
                </RadzenStack>
            </RadzenFieldset>
                    }
                @if (DB.SD.AuctionSD.IsInstantBuy(Model.AuctionType))
                {
                    <RadzenFieldset Text="Cena kup teraz">
                        <RadzenStack Gap="1rem">
               
                          
                                <RadzenRow AlignItems="AlignItems.Center">

                                    <RadzenColumn Size="12" SizeMD="12">
                                        <RadzenNumeric @bind-Value="Model.PriceInstant"
                                                       Placeholder="Cena kup teraz"
                                                       Style="width: 100%;" />
                                    </RadzenColumn>
                                </RadzenRow>
                           
                        </RadzenStack>
                    </RadzenFieldset>
                    }
        

        <!-- Upload Photos Section -->
        <RadzenFieldset Text="Zdjęcia">


                    <RadzenUpload id="ddUpload" @ref="uploadDD"
                                  ChooseText="Kliknij albo przerzuć tu pliki"
                                  Auto="false" Multiple="true"
                                  Change="OnChange"
                                  InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                                  Style="width: 100%" />


        </RadzenFieldset>

        <!-- Description Section -->
        <RadzenFieldset Text="Opis przedmiotu">
            <RadzenHtmlEditor 
                @bind-Value="Model.Description" 
                style="height: 450px;"
                Placeholder="Opis przedmiotu" />
        </RadzenFieldset>

    

       

        <!-- Submit Button -->
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-4">
            <RadzenButton Text="Zatwierdź" ButtonType="Radzen.ButtonType.Submit" Icon="save" Style="width: 150px;" />
      
        </RadzenStack>

    </RadzenStack>
</RadzenTemplateForm>
    </div>
</div>


@code {
    public DB.Models.NewAuction Model { get; set; } = new();
    public List<string> AllowedExtensions = new() { ".jpg", ".png"};
    RadzenUpload uploadDD;
    [CascadingParameter]
    public AuthModel Auth
    {
        get; set;
    }



    IEnumerable<DB.SD.EnumHelper.DropDown<DB.Domain.Entities.AuctionType>> Lista { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Lista = DB.SD.EnumHelper.GetEnumDisplayNames<DB.Domain.Entities.AuctionType>();
    }


   

    private async Task OnChange(Radzen.UploadChangeEventArgs args)
    {
        try
        {
            // Sprawdzanie, czy są pliki
            if (args.Files == null || !args.Files.Any())
            {
                return;
            }

            foreach (var file in args.Files)
            {
                if (file == null)
                {
                    continue;
                }
                var path = Path.Combine("Uploads", file.Name);  // Używamy file.Name, ponieważ to jest Radzen.File
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    var stream = file.OpenReadStream(long.MaxValue);
                    if (stream == null)
                    {
                        continue;
                    }

                    await stream.CopyToAsync(memoryStream);

                    // Zapisujemy plik na dysku
                    var uploadFolder = Path.Combine(Directory.GetCurrentDirectory(), "Uploads");
                    if (!Directory.Exists(uploadFolder))
                    {
                        Directory.CreateDirectory(uploadFolder);
                    }

                    using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
                    {
                        memoryStream.Seek(0, SeekOrigin.Begin);
                        await memoryStream.CopyToAsync(fileStream);
                    }

                    // Dodanie zdjęcia do modelu
                    var imageData = memoryStream.ToArray();

                    Model.Photos.Add(new DB.Models.Photo()
                        {
                            Order = Model.Photos.Count,
                            Extension = Path.GetExtension(file.Name),
                            ImageData = imageData
                        });
                }
            }
        }
        catch (Exception ex)
        {
    
        }
        finally
        {

            var uploadFolder = Path.Combine(Directory.GetCurrentDirectory(), "Uploads");
            if (Directory.Exists(uploadFolder))
            {
                var files = Directory.GetFiles(uploadFolder);
                foreach (var file in files)
                {
                    try
                    {
                        File.Delete(file);
                    }
                    catch (Exception deleteEx)
                    {

                    }
                }
            }
        }
    }

  
    private async Task HandleSubmit(DB.Models.NewAuction item)
    {
        var aukcjaId = await Mediator.Send(new DB.Modules.Auction.Command.CreateAuction.Request()
        {
                Description = item.Description,
                Photos = item.Photos,
                PriceAuction = item.PriceAuction,
                PriceInstant = item.PriceInstant,
                Title = item.Title,
                Type = item.AuctionType,
                UserId = Auth.Id
        });
        if (aukcjaId > 0)
        {
          
            uriHelper.NavigateTo("/auctionview/" + aukcjaId, forceLoad: true);
        }
        
    }
}
