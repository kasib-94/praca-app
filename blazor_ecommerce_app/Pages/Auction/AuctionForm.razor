@page "/newauction";
@using Syncfusion.Blazor.RichTextEditor;
@inject NavigationManager uriHelper;
<div class="col-12">
    <div class="col-6 mx-auto">
        <Syncfusion.Blazor.DataForm.SfDataForm ID="MyForm"  
                                               Model="@Model"
                                               OnSubmit="HandleSubmit">
            <FormValidator>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidator>
            <FormItems>
                <FormItem Field="@nameof(Model.AuctionType)">
                    <Template>
                        <Syncfusion.Blazor.DropDowns.SfDropDownList 
                        TValue="int" 
                        TItem="DB.SD.DropDownModel"
                        Placeholder="Select auction type" 
                        DataSource="@Lista"
                        ValueChanged="(int value)=> {Model.AuctionType = (DB.Domain.Entities.AuctionType)value;StateHasChanged();}">
                        <Syncfusion.Blazor.DropDowns.DropDownListFieldSettings Value="Id" Text="Name" />
                        </Syncfusion.Blazor.DropDowns.SfDropDownList>
                    </Template>
                </FormItem>
               
               
                <FormItem Field="@nameof(Model.Title)"></FormItem>
              <FormItem Field="@nameof(Model.Description)">
                 <Template>
                     <Syncfusion.Blazor.RichTextEditor.SfRichTextEditor 
                     Value="@Model.Description" 
                     ValueChanged="(string value)=>{Model.Description = value;}"
                     ValueExpression="()=>Model.Description"
                     >
                          <RichTextEditorToolbarSettings EnableFloating=true Items="@Tools" />
                          <RichTextEditorQuickToolbarSettings  Link="@Link" />
                      </Syncfusion.Blazor.RichTextEditor.SfRichTextEditor>
                    </Template>
                </FormItem>


                <FormItem Field="@nameof(Model.Photos)">
                    <Template>
                        <SfUploader  MaxFileSize="5000000" AllowMultiple=true AutoUpload="true">
                            <UploaderEvents ValueChange="@OnChange"></UploaderEvents>
                            <UploaderButtons>
                         
                            </UploaderButtons>
                        </SfUploader>
                    </Template>
                </FormItem>
              
            </FormItems>
            @if (DB.SD.AuctionSD.IsAuction(Model.AuctionType))
            {
                <FormItems>
                <FormItem Field="@nameof(Model.PriceAuction)" LabelText="Auction starting price" ColumnSpan="6"></FormItem>
                </FormItems>
            }
            @if (DB.SD.AuctionSD.IsInstantBuy(Model.AuctionType))
            {
            <FormItems>

                    <FormItem Field="@nameof(Model.PriceInstant)" LabelText="Auction instant buy price" ColumnSpan="6"></FormItem>
            </FormItems>
                }
        </Syncfusion.Blazor.DataForm.SfDataForm>
    </div>
</div>

@code {
    public DB.Models.NewAuction Model { get; set; } = new();
    public List<string> AllowedExtensions = new() { ".jpg", ".png"};
  
    [CascadingParameter]
    public AuthModel Auth
    {
        get; set;
    }

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
         new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },


    };
    private List<LinkToolbarItemModel> Link = new List<LinkToolbarItemModel>()
    {
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Open },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Edit },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.UnLink }
    };

    List<DB.SD.DropDownModel> Lista { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Lista = DB.SD.EnumHelper.GetEnumDisplayNames<DB.Domain.Entities.AuctionType>().ToList();
    }

    private async Task OnChange(Syncfusion.Blazor.Inputs.UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                var path = @"" + file.FileInfo.Name;
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    await file.File.OpenReadStream(long.MaxValue).CopyToAsync(memoryStream);

                    using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
                    {
                        memoryStream.Seek(0, SeekOrigin.Begin);
                        await memoryStream.CopyToAsync(fileStream);
                    }

                    var imageData = memoryStream.ToArray();

                    Model.Photos.Add(new DB.Models.Photo()
                        {
                            Order = Model.Photos.Count,
                            Extension = Path.GetExtension(file.FileInfo.Name),
                            ImageData = imageData
                        });
                }
            }
        }
        catch (Exception ex)
        {
            
        }
    }

    private async Task HandleSubmit(EditContext model)
    {
        var item = model.Model as DB.Models.NewAuction;
        var aukcjaId = await Mediator.Send(new DB.Modules.Auction.Command.CreateAuction.Request()
        {
                Description = item.Description,
                Photos = item.Photos,
                PriceAuction = item.PriceAuction,
                PriceInstant = item.PriceInstant,
                Title = item.Title,
                Type = item.AuctionType,
                UserId = Auth.Id
        });
        if (aukcjaId > 0)
        {
          
            uriHelper.NavigateTo("/auctionview/" + aukcjaId, forceLoad: true);
        }
        
    }
}
