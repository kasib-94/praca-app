@page "/newauction";
@using Syncfusion.Blazor.RichTextEditor;
<div class="col-12">
    <div class="col-6 mx-auto">
        <Syncfusion.Blazor.DataForm.SfDataForm ID="MyForm"  
                                               Model="@Model"
                                               OnSubmit="HandleSubmit">
            <FormValidator>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidator>
            <FormItems>
                <FormItem Field="@nameof(Model.AuctionType)">
                    <Template>
                        <Syncfusion.Blazor.DropDowns.SfDropDownList 
                        TValue="int" 
                        TItem="DB.SD.DropDownModel"
                        Placeholder="Select auction type" 
                        DataSource="@Lista"
                        ValueChanged="(int value)=> {Model.AuctionType = (DB.Domain.Entities.AuctionType)value;StateHasChanged();Model = Model;}">
                        <Syncfusion.Blazor.DropDowns.DropDownListFieldSettings Value="Id" Text="Name" />
                        </Syncfusion.Blazor.DropDowns.SfDropDownList>
                    </Template>
                </FormItem>
               
               
                <FormItem Field="@nameof(Model.Title)"></FormItem>
              <FormItem Field="@nameof(Model.Description)">
                 <Template>
                     <Syncfusion.Blazor.RichTextEditor.SfRichTextEditor Value="@Model.Description">
                          <RichTextEditorToolbarSettings EnableFloating=true Items="@Tools" />
                          <RichTextEditorQuickToolbarSettings  Link="@Link" />
                      </Syncfusion.Blazor.RichTextEditor.SfRichTextEditor>
                    </Template>
                </FormItem>


                <FormItem Field="@nameof(Model.Photos)">
                    <Template>
                        <SfUploader AutoUpload="true">
                            <UploaderEvents ValueChange="@OnChange"></UploaderEvents>
                        </SfUploader>
                    </Template>
                </FormItem>
              
            </FormItems>
            @if (Model.EnableAuction)
            {
                <FormItems>
                <FormItem Field="@nameof(Model.PriceAuction)" Placeholder="Auction starting price" ColumnSpan="6"></FormItem>
                </FormItems>
            }
             @if (Model.EnableInstant)
                {
            <FormItems>

                    <FormItem Field="@nameof(Model.PriceInstant)" Placeholder="Auction instant buy price" ColumnSpan="6"></FormItem>
            </FormItems>
                }
        </Syncfusion.Blazor.DataForm.SfDataForm>
    </div>
</div>

@code {
    public DB.Models.NewAuction Model { get; set; } = new();
    public List<string> AllowedExtensions = new() { ".jpg", ".png"};
  


    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
         new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },


    };
    private List<LinkToolbarItemModel> Link = new List<LinkToolbarItemModel>()
    {
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Open },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.Edit },
        new LinkToolbarItemModel() { Command = LinkToolbarCommand.UnLink }
    };

    List<DB.SD.DropDownModel> Lista { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Lista = DB.SD.EnumHelper.GetEnumDisplayNames<DB.Domain.Entities.AuctionType>().ToList();
    }

    private async Task OnChange(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                var path = @"" + file.FileInfo.Name;
                FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
                await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                Model.Photos.Add(new DB.Models.Photo()
                {
                     Stream = filestream,
                     Order = Model.Photos.Count,
                      Extension = ".jpg"
                });
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleSubmit(EditContext model)
    {
        var item = model.Model as DB.Models.NewAuction;
        await Mediator.Send(new DB.Modules.Auction.Command.CreateAuction.Request()
        {
               Description = item.Description,
                Photos = item.Photos,
                 PriceAuction = item.PriceAuction,
                PriceInstant = item.PriceInstant,
                Title = item.Title,
                Type = item.AuctionType
        });
    }
}
