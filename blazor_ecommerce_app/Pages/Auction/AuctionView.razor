@page "/auctionview/{AuctionId:int}"
@using DB.Modules.Auction.Queries;
@using Syncfusion.Blazor.Popups;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<Syncfusion.Blazor.Popups.SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@BuyInstantVisible">
    <Syncfusion.Blazor.Popups.DialogTemplates>
        <Header> Confirmation </Header>
        <Content> Are you sure you wanna buy for @Model.PriceInstant.ToString() ? </Content>
    </Syncfusion.Blazor.Popups.DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="()=>BuyInstant()" />
        <DialogButton Content="Cancel" OnClick="()=>{BuyInstantVisible = false;StateHasChanged();}" />
    </DialogButtons>
</Syncfusion.Blazor.Popups.SfDialog>

<Syncfusion.Blazor.Popups.SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@AuctionOfferVisible">
    <Syncfusion.Blazor.Popups.DialogTemplates>
        <Header> Confirmation </Header>
        <Content> Are you sure you wanna offer @AuctionOffer.ToString() ? </Content>
    </Syncfusion.Blazor.Popups.DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="()=>MakeOffer()" />
        <DialogButton Content="Cancel" OnClick="()=>{AuctionOfferVisible = false;StateHasChanged();}" />
    </DialogButtons>
</Syncfusion.Blazor.Popups.SfDialog>
<div class="col-12">
    @if (Model != null)
    {
        <div class="container mt-4">
            <div class="row">
                <div class="col-lg-4">
                    <div class="card mb-2">
                        <div class="card-body">
                            <h4 class="card-title">@Model.Title</h4><h3>@(" auction of user"+Model.OwnerUsername)</h3>
                            <p class="card-text">
                                <span class="badge bg-primary">Auction started:</span> @Model.AuctionStarted.ToString(DB.SD.SD.DateTimeFullFormat)
                            </p>
                            <p class="card-text">
                                <span class="badge bg-warning">Auction will finish:</span> @Model.AuctionFinish.ToString(DB.SD.SD.DateTimeFullFormat)
                            </p>

                        </div>
                    </div>
                  
                </div>
                <div class="col-lg-4">
                    <div class="d-flex flex-column">
                        @if (Model.BuyNowOption != null)
                        {

                            <div class="card mb-4">
                                <div class="card-body">
                                    <h4 class="card-title">Make offer</h4>

                                    <div class="card-text">
                                        <Syncfusion.Blazor.Buttons.SfButton class="btn btn-success" OnClick="()=>{BuyInstantVisible = true;StateHasChanged();}">
                                            Buy Now
                                        </Syncfusion.Blazor.Buttons.SfButton>
                                    </div>
                                </div>
                            </div>
                           
                        }
                        @if (Model.AuctionOfferOption != null)
                        {

                            <div class="card mb-4">
                                <div class="card-body">
                                    <h4 class="card-title">Make offer</h4>
                                    <div class="card-item">
                                        <SfNumericTextBox TValue="decimal?"
                                                          Value=AuctionOffer
                                                          ValueChanged="@(offer => {AuctionOffer = (decimal)offer;StateHasChanged();})"
                                                          ValueExpression="()=>AuctionOffer"
                                                          Format="c2"
                                                          Placeholder="Your offer"
                                                          FloatLabelType="@FloatLabelType.Auto">
                                        </SfNumericTextBox>
                                    </div>
                                    <div class="card-text">
                                        <Syncfusion.Blazor.Buttons.SfButton class="btn btn-success"
                                        Disabled="IsCurrentOfferValid == false"
                                        OnClick="()=>{AuctionOfferVisible = true;StateHasChanged();}">
                                            Make offer
                                        </Syncfusion.Blazor.Buttons.SfButton>
                                    </div>
                                </div>
                            </div>

                           
                        }
                    </div>
                </div>
                @if (DB.SD.AuctionSD.IsAuction(Model.AuctionType))
                {
                    <div class="card-body col-lg-4">
                        <h4 class="card-title">Current offers</h4>
                        <div class="column">
                            @{
                                bool isFirst = true; 
                            }
                            @foreach (var offer in Model.Offers.Where(x => x.PriceAuction.HasValue).OrderByDescending(x => x.PriceAuction))
                            {
                                <div class="mb-3">
                                   
                                    <div class="card h-100">
                                        <div class="card-body">
                                            @if (isFirst)
                                            {
                                                <div class="card-item">
                                                <span class="badge bg-success">Highest offer!</span>
                                                </div>
                                            }
                                            <p class="card-text">
                                                <strong>@offer.UserName</strong> offered <span class="badge bg-info">@offer.PriceAuction.ToString()</span>
                                                <br />
                                                <small class="text-muted">at @offer.Date.ToString(DB.SD.SD.DateTimeFullFormat)</small>
                                            </p>
                                        </div>
                                    </div>
                                     @{
                                        isFirst = false; 
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="card mb-4">
                <div class="card-body">
                    <h4 class="card-title">Description</h4>

                    <div class="card-text">
                        @((MarkupString)Model.Description)
                    </div>
                </div>
            </div>

            @if (Model.Photos.Any())
            {
                <div class="row mt-4">
                    @foreach (var photo in Model.Photos)
                    {
                        <div class="col-md-3 mb-3">
                            <div class="card h-100">
                                <img class="card-img-top" src="@(GetImageDataUrl(photo.ImageData, photo.Extension))" alt="Zdjęcie" />
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>
@code {
    [Parameter]
    public int AuctionId { get; set; }

    [CascadingParameter]
    public AuthModel Auth { get; set; }
    public decimal AuctionOffer { get; set; }

    public bool BuyInstantVisible { get; set; } = false;
    public bool AuctionOfferVisible { get; set; } = false;

    public bool IsCurrentOfferValid
    {
        get
        {
            if (AuctionOffer <= 0)
            {
                return false;
            }
            return Model.Offers.Any() == false
                                        ? true
                                        : (Model.Offers.Max(x => x.PriceAuction) < AuctionOffer ? true : false);
        }
    }

    public GetAuctionById.Response Model { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchData();
        }

    }

    public async Task FetchData()
    {

        if (Auth == null)
        {
            Auth = await localStorage.GetItemAsync<AuthModel>("auth_token");
        }
        Model = await Mediator.Send(new DB.Modules.Auction.Queries.GetAuctionById.Request()
            {
                AuctionId = AuctionId,
                UserId = Auth.Id

            });
        StateHasChanged();
    }

    private string GetImageDataUrl(byte[] imageData, string extension)
    {
        string base64Image = Convert.ToBase64String(imageData);
        return $"data:image/{extension};base64,{base64Image}";
    }
    public async Task BuyInstant()
    {
        await Mediator.Send(Model.BuyNowOption);
        BuyInstantVisible = false;
        await FetchData();

    }
    public async Task MakeOffer()
    {
        if (IsCurrentOfferValid)
        {
            var item = Model.AuctionOfferOption as DB.Modules.Auction.Command.MakeOffer.Request;
            item.Price = AuctionOffer;
            await Mediator.Send(item);
            AuctionOfferVisible = false;
            await FetchData();
        }
        else
        {
            Notifiaction.ShowToast(new Service.Notification.ToastOption()
                {
                    Content = "Offer to low",
                    Type = Service.Notification.ToastType.warning,
                });
        }
    }
}
