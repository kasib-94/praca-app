@page "/auctionview/{AuctionId:int}"
@using DB.Modules.Auction.Queries;
@using Syncfusion.Blazor.Popups;


<blazor_ecommerce_app.Components.BaseAuthroziedComponent>

    @if (Model == null)
        return;

    <Syncfusion.Blazor.Popups.SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@BuyInstantVisible">
        <Syncfusion.Blazor.Popups.DialogTemplates>
            <Header> Potwierdzenie </Header>
            <Content> Jesteś pewien, że chcesz kupić za @Model.PriceInstant.Value.ToString()? </Content>
        </Syncfusion.Blazor.Popups.DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Tak" CssClass="e-success" IsPrimary="true" OnClick="()=>BuyInstant()" />
            <DialogButton Content="Nie" OnClick="()=>{BuyInstantVisible = false;StateHasChanged();}" />
        </DialogButtons>
    </Syncfusion.Blazor.Popups.SfDialog>

    <Syncfusion.Blazor.Popups.SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@ZakonczenieAukcji">
        <Syncfusion.Blazor.Popups.DialogTemplates>
            <Header> Potwierdzenie </Header>
            <Content> Czy na pewno chcesz zakończyć aukcje? </Content>
        </Syncfusion.Blazor.Popups.DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Tak" CssClass="e-success" IsPrimary="true" OnClick="()=>FinishAuctionEvent()" />
            <DialogButton Content="Nie" OnClick="()=>{ZakonczenieAukcji = false;StateHasChanged();}" />
        </DialogButtons>
    </Syncfusion.Blazor.Popups.SfDialog>


    <Syncfusion.Blazor.Popups.SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@AuctionOfferVisible">
        <Syncfusion.Blazor.Popups.DialogTemplates>
            <Header> Potwierdzenie </Header>
            <Content> Jesteś pewien, że chcesz licytować za @AuctionOffer.ToString()? </Content>
        </Syncfusion.Blazor.Popups.DialogTemplates>
        <DialogButtons>
            <DialogButton CssClass="e-success" Content="Tak" IsPrimary="true" OnClick="()=>MakeOffer()" />
            <DialogButton Content="Nie" OnClick="()=>{AuctionOfferVisible = false;StateHasChanged();}" />
        </DialogButtons>
    </Syncfusion.Blazor.Popups.SfDialog>

    @if(Model.Statuses.Any(x=>x.Type == DB.Domain.Entities.AuctionStatusType.FinishedByOwner))
    {
        <RadzenAlert Variant="@Variant.Filled" AlertStyle="@AlertStyle.Danger" Size="@AlertSize.Large" Shade="Shade.Default" AllowClose=false>
            Aukcja zakończona przez właściciela
        </RadzenAlert>
    }
    
    @if (Model.Statuses.Any(x => x.Type == DB.Domain.Entities.AuctionStatusType.Finished))
    {
        <RadzenAlert Variant="@Variant.Filled" AlertStyle="@AlertStyle.Success" Size="@AlertSize.Large" Shade="Shade.Default" AllowClose=false>
            Aukcja zakończona 
        </RadzenAlert>
    }

    <RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 800px">
        <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H4"><b>@(Model.Title)</b></RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-3">
            <RadzenStack  Gap="0">
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Sprzedawca</RadzenText>
                <RadzenText @onclick='()=>{Navigation.NavigateTo("/user/"+Model.OwnerId,forceLoad:true);}'
                    TextStyle="TextStyle.Body1"><u><b> @Model.OwnerUsername <i class="ml-2 fas fa-search"></i></b></u></RadzenText>

            </RadzenStack>
   
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" class="rz-p-3">
            @if (User.Id == Model.OwnerId && Model.Statuses.Any(x => x.Type == DB.Domain.Entities.AuctionStatusType.Finished) == false && Model.Statuses.Any(x => x.Type == DB.Domain.Entities.AuctionStatusType.FinishedByOwner) == false)
            {
            
                <RadzenButton Click='()=>{ ZakonczenieAukcji = true; StateHasChanged();}' Variant="Variant.Text" class="rz-text-danger-color"
                              Text="Zakończ aukcje" />
            }

        </RadzenStack>
        <RadzenCard class="rz-background-color-secondary-darker rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem calc(-1 * var(--rz-card-padding));">
  
            <RadzenRow RowGap="0">
                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Informacje</strong></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Data rozpoczęcia</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(Model.AuctionStarted.ToString(DB.SD.SD.DateTimeFullFormat))</b></RadzenText>

                   @if (Model.BuyerId.HasValue)
                    {
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Data zakończenia</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(Model.DataKupna.Value.ToString(DB.SD.SD.DateTimeFullFormat))</b></RadzenText>
                    }

                </RadzenColumn>

                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Cena</strong></RadzenText>
                 
                    @if (Model.Statuses.Any(x => x.Type == DB.Domain.Entities.AuctionStatusType.FinishedByOwner) == false &&
                         Model.Statuses.Any(x => x.Type == DB.Domain.Entities.AuctionStatusType.Finished) == false)
                    {
                        @if (Model.PriceInstant.HasValue)
                        {
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Cena kup teraz</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(Model.PriceInstant.Value.ToString())</b></RadzenText>
                        }

                        @if (Model.PriceAuction.HasValue)
                        {
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Najwyższa oferta</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(Model.PriceAuction.Value.ToString())</b></RadzenText>
                        }
                    }
                    else if (Model.Statuses.Any(x => x.Type == DB.Domain.Entities.AuctionStatusType.Finished))
                    {
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Sprzedano za</RadzenText>

                        var najwiekszaoferta = Model.Offers.Select(x => x.PriceInstant).Concat(Model.Offers.Select(x => x.PriceAuction)).Max();

                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@najwiekszaoferta.Value.ToString()</b></RadzenText>
                    }


                </RadzenColumn>

            </RadzenRow>
           
        </RadzenCard>
        <RadzenRow class="mb-2" RowGap="0">
            <RadzenColumn SizeSM="6">

                <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Oferty</strong></RadzenText>

                @{
                    var ostatniaOferta = Model.Offers.OrderByDescending(x => x.Date).FirstOrDefault();
                }

                @foreach (var oferta in Model.Offers.OrderByDescending(x => x.Date))
                {
                    if (oferta.PriceInstant.HasValue)
                    {
                        <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Success" Text="@("Kupiono natychmiast za "+oferta.PriceInstant.Value)" />
                    }
                    else if (oferta.PriceAuction.HasValue)
                    {
                        bool czyToOstatniaOferta = ostatniaOferta.Id == oferta.Id;
                        bool czyTaOfertaZakonczylaAukcje = czyToOstatniaOferta && DateTime.Now > Model.AuctionFinish;
                        <div class="col-12 mx-1">
                            @if (czyTaOfertaZakonczylaAukcje)
                            {
                            <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Success" Text="@("Wygrała oferta "+oferta.PriceAuction.Value)" />
                            }
                            else if (czyToOstatniaOferta)
                            {
                            <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Success" Text="@("Najwyższa oferta "+oferta.PriceAuction.Value)" />
                            }
                            else
                            {
                            <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Base" Text="@("Oferta "+oferta.PriceAuction.Value)" />
                            }
                        </div>
                     
                    }
                }



            </RadzenColumn>
            <RadzenColumn SizeSM="6">
                <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Dodaj ofertę</strong></RadzenText>

                @{
                    var ostatniaOferta = Model.Offers.OrderByDescending(x => x.Date).FirstOrDefault();
                }


                @if (Model.BuyNowOption != null)
                {
       

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenCard>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Kup teraz</RadzenText>
                            <RadzenButton Text="Kup teraz"
                                          ButtonStyle="@ButtonStyle.Success"
                                          Click="()=>{ BuyInstantVisible = true; StateHasChanged(); }">
                            </RadzenButton>
                        </RadzenCard>
                    </RadzenColumn>
                }

                @if (Model.AuctionOfferOption != null)
                {

                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenCard>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Licytuj</RadzenText>
                            <RadzenNumeric TValue="decimal?"
                                           Value="@AuctionOffer"
                                           ValueChanged="@(offer => {  AuctionOffer = (decimal)offer; StateHasChanged(); })"
                                           Format="C2"
                                           Placeholder="Your offer">
                            </RadzenNumeric>
                            <RadzenButton Text="Licytuj"
                                          Disabled="@(!IsCurrentOfferValid)"
                                          ButtonStyle="@ButtonStyle.Base"
                                          Click="()=>{ AuctionOfferVisible = true; StateHasChanged(); }" />
                        </RadzenCard>
                    </RadzenColumn>


                }
            </RadzenColumn>





        </RadzenRow>
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" class="col-12">
            <RadzenText TextAlign="TextAlign.Center" class="col-12" TextStyle="TextStyle.H4"><b>@("Opis przedmiotu")</b></RadzenText>
            <RadzenStack class="col-12" Gap="0">
                    @((MarkupString)Model.Description)
            </RadzenStack>
        </RadzenStack>

        <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem calc(-1 * var(--rz-card-padding));">

      
            <RadzenRow>
                @if (Model.Photos.Any())
                {
                    <RadzenCarousel 
                         ButtonStyle="@ButtonStyle.Info"
                         ButtonShade="@Shade.Darker"
                        @ref=carousel @bind-SelectedIndex="@selectedIndex" Auto="false" AllowPaging="@allowPaging"
                                    Style="height: 400px;" PagerPosition="@pagerPosition" PagerOverlay="@pagerOverlay">
                        <Items>
                            @foreach (var item in Model.Photos)
                            {
                                <RadzenCarouselItem>
                                    <RadzenImage Path="@(GetImageDataUrl(item.ImageData, item.Extension))" class="rz-h-100" />
                                </RadzenCarouselItem>
                            }
                        </Items>
                    </RadzenCarousel>
                }
            </RadzenRow>
        </RadzenCard>
    </RadzenCard>



</blazor_ecommerce_app.Components.BaseAuthroziedComponent>
@code {
    [Parameter]
    public int AuctionId { get; set; }
    RadzenCarousel carousel;
    bool allowPaging = true;
    bool pagerOverlay = true;
    PagerPosition pagerPosition = PagerPosition.Bottom;

    int selectedIndex;
    public DB.Models.AuthModel User { get; set; }

    public decimal AuctionOffer { get; set; }

    public bool BuyInstantVisible { get; set; } = false;
    public bool AuctionOfferVisible { get; set; } = false;
    public bool ZakonczenieAukcji { get; set; } = false;

    private int UserId { get; set; }

    public bool IsCurrentOfferValid
    {
        get
        {
            if (AuctionOffer <= 0)
            {
                return false;
            }
            return Model.Offers.Any() == false
                                        ? true
                                        : (Model.Offers.Max(x => x.PriceAuction) < AuctionOffer ? true : false);
        }
    }

    public GetAuctionById.Response Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await CustomAuthProvider.GetUser();
        if (User != null)
        {
            await FetchData();
        }
    }



    public async Task FetchData()
    {       
        if(User != null)
        {
            Model = await Mediator.Send(new DB.Modules.Auction.Queries.GetAuctionById.Request()
                {
                    AuctionId = AuctionId,
                    UserId = User.Id
                });

            if (Model.Photos.Any())
                selectedIndex = 0;

            StateHasChanged();
        }   
    }

    private string GetImageDataUrl(byte[] imageData, string extension)
    {
        string base64Image = Convert.ToBase64String(imageData);
        return $"data:image/{extension};base64,{base64Image}";
    }
    public async void BuyInstant()
    {
        await Mediator.Send(Model.BuyNowOption);
        BuyInstantVisible = false;
        await FetchData();

    }
    public async void MakeOffer()
    {
        if (IsCurrentOfferValid)
        {
            var item = Model.AuctionOfferOption as DB.Modules.Auction.Command.MakeOffer.Request;
            item.Price = AuctionOffer;
            await Mediator.Send(item);
            await FetchData();
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = "Oferta zbyt niska",
                    CloseOnClick = true
                });


        }
        AuctionOfferVisible = false;
        await FetchData();
    }


    public async Task FinishAuctionEvent()
    {
        await Mediator.Send(new DB.Modules.Auction.Command.FinishMyAuction.Request()
            {
                UserId = UserId,
                AuctionId = Model.AuctionId
            });
            ZakonczenieAukcji = false;
        await FetchData();

    }

    
}
