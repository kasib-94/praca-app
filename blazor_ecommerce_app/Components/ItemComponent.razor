@using DB.Modules.Auction.Queries;
@using DB.Modules.Auction.Command;

@if (Data == null)
    return;
        <div class="d-flex row mx-auto">

    @if (string.IsNullOrEmpty(Title) == false)
    {
        <div class="mx-auto my-2 col-12">
            <RadzenText TextAlign=@TextAlign.Center TextStyle="TextStyle.H4">@Title</RadzenText>
        </div>
    }

    <Syncfusion.Blazor.Popups.SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@ZakonczenieAukcji">
        <Syncfusion.Blazor.Popups.DialogTemplates>
            <Header> Potwierdzenie </Header>
            <Content> Czy na pewno chcesz zakończyć aukcje? </Content>
        </Syncfusion.Blazor.Popups.DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Tak" CssClass="e-success" IsPrimary="true" OnClick="()=>FinishAuction(konczonaAukcjaId)" />
            <DialogButton Content="Nie" OnClick="()=>{ZakonczenieAukcji = false;StateHasChanged();}" />
        </DialogButtons>
    </Syncfusion.Blazor.Popups.SfDialog>
      
@foreach (var item in Data)
{    
            bool czyMaMiniaturke = item.Minature != null && item.Extension != null;
       
        <RadzenCard  class="col-4 my-3 mx-2 box-shadow-left-bottom" Style="max-width: 420px">      
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-p-4">
                @if (czyMaMiniaturke)
                {
                    <RadzenImage Path="@(DB.SD.ImageHelper.GetImageDataUrl(item.Minature, item.Extension))" Style="width: 150px; height: 150px; border-radius: 50%;" />
                }

           

                <RadzenStack Gap="10px">
                    @if (item.Status == DB.Domain.Entities.AuctionStatusType.PaymentConfirmed)
                    {
                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Opłacone" />
                    }

                    @if (item.Status == DB.Domain.Entities.AuctionStatusType.Finished)
                    {
                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Do zapłaty" />
                    }
                   
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Przedmiot</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(item.Title)</b></RadzenText>
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Style="@(czyMaMiniaturke ? "" : "margin-top: 98px !important")"  Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0">

              @{
                    bool czyTwojaAukcja = User != null && item.OwnerId != null && item.OwnerId == User.Id;
              }

                @if(item.AuctionId != null )
                {
                    <RadzenButton Variant="Variant.Text" class="rz-text-secondary-color"
                                  ButtonStyle="@ButtonStyle.Secondary"
                                  Click="() =>{ Navigation.NavigateTo(_auctionPath+item.AuctionId, forceLoad : true);}"
                    Text="Pokaż " />
                }

                @if (item.OwnerId != null && czyTwojaAukcja == false)
                {
                    <RadzenButton Click='()=>{Navigation.NavigateTo("/user/"+item.OwnerId,forceLoad:true);}'
                        Variant="Variant.Text" class="rz-text-primary-color"
                        ButtonStyle="@ButtonStyle.Primary"
                        Text="@item.OwnerName" />
                }

                @if (czyTwojaAukcja && item.AuctionId.HasValue && item.Status != DB.Domain.Entities.AuctionStatusType.PaymentConfirmed 
                && item.Status != DB.Domain.Entities.AuctionStatusType.Finished && item.Status != DB.Domain.Entities.AuctionStatusType.FinishedByOwner)
                {
                    <RadzenButton Click='()=>{konczonaAukcjaId= item.AuctionId.Value; ZakonczenieAukcji = true; StateHasChanged();}'
                                  ButtonStyle="@ButtonStyle.Danger"
                        Variant="Variant.Text" class="rz-text-danger-color"
                                  Text="Zakończ aukcje" />

                }

                @if (TypKomponentuItem == DB.Models.TypKomponentuItem.DoZaplaty)
                {
                    <RadzenButton Click='()=>{Navigation.NavigateTo(postaldata+item.AuctionId, forceLoad : true);}' 
                        Variant="Variant.Text" 
                        ButtonStyle="@ButtonStyle.Success"
                       Text="Zapłać" /> 
                }
                @if(TypKomponentuItem == DB.Models.TypKomponentuItem.Oplacone && User.Id == item.OwnerId)
                {
                    <RadzenButton Click='async()=>{await DajDaneDoWysylki(item.AuctionId.Value);}'
                                  Variant="Variant.Text"
                                  ButtonStyle="@ButtonStyle.Info"
                                  Text="Pokaz dane do wysyłki" />
                }

            </RadzenStack>
        </RadzenCard>
}
</div>
@code {

    private  string _auctionPath = "/auctionview/";
    public string postaldata = "/postaldata/";
    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public IEnumerable<DB.Models.IItem> Data { get; set; }
    [Parameter]
    public string Title { get; set; }
    public bool ZakonczenieAukcji { get; set; } = false;
    [Parameter]
    public DB.Models.TypKomponentuItem TypKomponentuItem { get; set; } = DB.Models.TypKomponentuItem.Brak;

    private int konczonaAukcjaId;

    [Parameter]
    public EventCallback OdswiezDane { get; set; }

    public DB.Models.AuthModel User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await CustomAuthProvider.GetUser();
    }

    public async Task FinishAuction(int auctionId)
    {
        await Mediator.Send(new DB.Modules.Auction.Command.FinishMyAuction.Request()
            {
                UserId = UserId,
                AuctionId = auctionId
            });
        ZakonczenieAukcji = false;
        await OdswiezDane.InvokeAsync();

    }

    public async Task DajDaneDoWysylki(int auctionId)
    {
        var daneDoWysylki = await Mediator.Send(new DB.Modules.Payment.Queries.GetPostalData.Request()
                    {
                        AuctionId = auctionId,
                        UserId = User.Id
                    });

        await Dialog.OpenAsync("Dane do wysyłki", ds =>
            {
    return @<div>
        <RadzenFieldset Text="Adres">
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenTextBox @bind-Value="daneDoWysylki.Adress" class="col-12" Disabled="true" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenFieldset Text="Kod pocztowy">
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenTextBox @bind-Value="daneDoWysylki.PostCode" class="col-12" Disabled="true" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenFieldset Text="Numer telefonu">
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenTextBox @bind-Value="daneDoWysylki.PhoneNumber" class="col-12" Disabled="true" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>
    </div>;
    }, new Radzen.DialogOptions()
    {
        CssClass = "custom-dialog-class",
        WrapperCssClass = "custom-dialog-wrapper-class"
    });
    }


  

}
